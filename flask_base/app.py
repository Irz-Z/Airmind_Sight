from flask import Flask, render_template, request, jsonify
import json
import os
from utils import (
    normalize_province_name,
    get_nominatim_places,
    get_air_quality_by_coordinates,
    get_aqi_level_description,
    remove_duplicates,
    get_combined_tourism,
    enrich_places_with_air_quality, # Imported from utils.py
    load_from_cache,
    save_to_cache,
    rank_places_by_dust, # Imported from utils.py
    get_time_series_data,
    analyze_time_series_ranking,
    get_forecast_data
)

app = Flask(__name__)

def add_ranking_to_places(places):
    """Add a 'rank' field to each place based on its order in the list (1-based)."""
    for idx, place in enumerate(places):
        place['rank'] = idx + 1
    return places

@app.route("/", methods=["GET", "POST"])
def index():
    """
    ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ POST ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Cache ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®
    ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Time Series Analysis
    """
    province = ""
    results = {}
    error_message = ""
    
    # Time series parameters
    enable_time_series = False
    time_mode = "historical"
    start_date = ""
    end_date = ""
    forecast_days = "5"
    time_interval = "daily"

    # Read parameters from form on POST, from args on GET
    if request.method == "POST":
        sort_by_dust = request.form.get("sort_by_dust", "aqius")
        enable_time_series = request.form.get("enable_time_series") == "true"
        time_mode = request.form.get("time_mode", "historical")
        start_date = request.form.get("start_date", "")
        end_date = request.form.get("end_date", "")
        forecast_days = request.form.get("forecast_days", "5")
        time_interval = request.form.get("time_interval", "daily")
    else:
        sort_by_dust = request.args.get("sort_by_dust", "aqius")
        enable_time_series = request.args.get("enable_time_series") == "true"
        time_mode = request.args.get("time_mode", "historical")
        start_date = request.args.get("start_date", "")
        end_date = request.args.get("end_date", "")
        forecast_days = request.args.get("forecast_days", "5")
        time_interval = request.args.get("time_interval", "daily")

    if request.method == "POST":
        province_input = request.form.get("province", "").strip()
        
        if not province_input:
            error_message = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î"
        else:
            province = normalize_province_name(province_input)
            
            # 1. ‡∏•‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Cache ‡∏Å‡πà‡∏≠‡∏ô
            cached_data = load_from_cache(province)
            if cached_data:
                results = cached_data
                # ‡∏´‡∏≤‡∏Å‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å Cache ‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ enrich ‡πÅ‡∏•‡∏∞ rank ‡πÉ‡∏´‡∏°‡πà
                if results.get("tourism"):
                    results["tourism"] = enrich_places_with_air_quality(results["tourism"])
                    results["tourism"] = rank_places_by_dust(results["tourism"], sort_by_dust)
                    results["tourism"] = add_ranking_to_places(results["tourism"])
                if results.get("hotels"):
                    results["hotels"] = enrich_places_with_air_quality(results["hotels"])
                    results["hotels"] = rank_places_by_dust(results["hotels"], sort_by_dust)
                    results["hotels"] = add_ranking_to_places(results["hotels"])
                if results.get("restaurants"):
                    results["restaurants"] = enrich_places_with_air_quality(results["restaurants"])
                    results["restaurants"] = rank_places_by_dust(results["restaurants"], sort_by_dust)
                    results["restaurants"] = add_ranking_to_places(results["restaurants"])
                if results.get("shopping"):
                    results["shopping"] = enrich_places_with_air_quality(results["shopping"])
                    results["shopping"] = rank_places_by_dust(results["shopping"], sort_by_dust)
                    results["shopping"] = add_ranking_to_places(results["shopping"])
                print(f"‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {province}")
            else:
                try:
                    # 2. ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô Cache ‡∏´‡∏£‡∏∑‡∏≠ Cache ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API
                    # get_combined_tourism ‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß
                    tourism_places = get_combined_tourism(province, 6)
                    hotels = get_nominatim_places(province, "hotel", 6)
                    restaurants = get_nominatim_places(province, "restaurant", 6)
                    shopping = get_nominatim_places(province, "shopping center", 4)
                    
                    # 3. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡∏ù‡∏∏‡πà‡∏ô
                    if tourism_places:
                        tourism_places = enrich_places_with_air_quality(tourism_places)
                        tourism_places = rank_places_by_dust(tourism_places, sort_by_dust)
                        tourism_places = add_ranking_to_places(tourism_places)
                    if hotels:
                        hotels = enrich_places_with_air_quality(hotels)
                        hotels = rank_places_by_dust(hotels, sort_by_dust)
                        hotels = add_ranking_to_places(hotels)
                    if restaurants:
                        restaurants = enrich_places_with_air_quality(restaurants)
                        restaurants = rank_places_by_dust(restaurants, sort_by_dust)
                        restaurants = add_ranking_to_places(restaurants)
                    if shopping:
                        shopping = enrich_places_with_air_quality(shopping)
                        shopping = rank_places_by_dust(shopping, sort_by_dust)
                        shopping = add_ranking_to_places(shopping)

                    results = {
                        "tourism": tourism_places,
                        "hotels": hotels,
                        "restaurants": restaurants,
                        "shopping": shopping,
                        # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ "temples" ‡πÅ‡∏¢‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏£‡∏ß‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô "tourism"
                    }
                    
                    # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                    total_results = sum(len(places) for key, places in results.items() if key != "total_count")
                    results["total_count"] = total_results

                    # 4. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
                    save_to_cache(province, results)
                    
                    # 5. ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Time Series ‡πÉ‡∏´‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
                    if enable_time_series:
                        try:
                            print(f"üìä ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Time Series ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {province}")
                            
                            if time_mode == "forecast":
                                # ‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏®
                                time_series_data = get_forecast_data(province, int(forecast_days), time_interval)
                            else:
                                # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á
                                if not start_date or not end_date:
                                    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏
                                    import datetime
                                    end_date = datetime.date.today().strftime('%Y-%m-%d')
                                    start_date = (datetime.date.today() - datetime.timedelta(days=7)).strftime('%Y-%m-%d')
                                
                                time_series_data = get_time_series_data(province, start_date, end_date, time_interval)
                            
                            if time_series_data:
                                # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á
                                real_data_count = sum(1 for item in time_series_data if item.get('source') == 'api_realtime')
                                cached_data_count = sum(1 for item in time_series_data if item.get('source') == 'cache')
                                simulated_data_count = sum(1 for item in time_series_data if item.get('source') in ['generated_realistic', 'calculated_forecast'])
                                
                                # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö
                                metric = 'aqi' if sort_by_dust == 'aqius' else sort_by_dust
                                time_series_analysis = analyze_time_series_ranking(time_series_data, metric)
                                
                                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå time series ‡∏•‡∏á‡πÉ‡∏ô results
                                results['time_series'] = {
                                    'enabled': True,
                                    'mode': time_mode,
                                    'start_date': start_date,
                                    'end_date': end_date,
                                    'forecast_days': forecast_days,
                                    'interval': time_interval,
                                    'analysis': time_series_analysis,
                                    'raw_data': time_series_data,
                                    'data_statistics': {
                                        'total_records': len(time_series_data),
                                        'real_data_count': real_data_count,
                                        'cached_data_count': cached_data_count,
                                        'simulated_data_count': simulated_data_count
                                    },
                                    'real_data_count': real_data_count  # ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô template
                                }
                                
                                print(f"‚úÖ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Time Series ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
                                print(f"  üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(time_series_data)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
                                print(f"  üåê ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á: {real_data_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
                                print(f"  üìÅ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• cache: {cached_data_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
                                print(f"  üîÑ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á: {simulated_data_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
                            else:
                                results['time_series'] = {
                                    'enabled': True,
                                    'error': '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Time Series ‡πÑ‡∏î‡πâ'
                                }
                        except Exception as ts_error:
                            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô Time Series: {ts_error}")
                            results['time_series'] = {
                                'enabled': True,
                                'error': f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(ts_error)}'
                            }
                    else:
                        results['time_series'] = {'enabled': False}
                    
                except Exception as e:
                    error_message = f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: {str(e)}"
                    results = {}

    return render_template("index.html", 
                           province=province, 
                           results=results, 
                           error_message=error_message,
                           sort_by_dust=sort_by_dust,
                           enable_time_series=enable_time_series,
                           time_mode=time_mode,
                           start_date=start_date,
                           end_date=end_date,
                           forecast_days=forecast_days,
                           time_interval=time_interval) # ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ parameters ‡πÑ‡∏õ‡∏¢‡∏±‡∏á template

@app.route("/api/air-quality/<float:lat>/<float:lon>")
def get_air_quality_api(lat, lon):
    """API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ï‡∏≤‡∏°‡∏û‡∏¥‡∏Å‡∏±‡∏î"""
    try:
        air_quality = get_air_quality_by_coordinates(lat, lon)
        
        if air_quality and air_quality.get('pollution'):
            aqi = air_quality['pollution'].get('aqius', 0)
            pm25 = air_quality['pollution'].get('p2', 0)
            pm10 = air_quality['pollution'].get('p1', 0)
            level, description = get_aqi_level_description(aqi)
            
            return jsonify({
                'success': True,
                'data': {
                    'aqi': aqi,
                    'pm25': pm25,
                    'pm10': pm10,
                    'level': level,
                    'description': description,
                    'city': air_quality.get('city', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'),
                    'weather': air_quality.get('weather', {})
                }
            })
        else:
            return jsonify({
                'success': False,
                'error': '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÑ‡∏î‡πâ'
            })
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        })

@app.route("/api/search")
def search_places():
    """API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà (‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API call)"""
    province = request.args.get('province', '').strip()
    place_type = request.args.get('type', 'tourism')
    limit = int(request.args.get('limit', 5))
    
    if not province:
        return jsonify({
            'success': False,
            'error': '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î'
        })
    
    try:
        province = normalize_province_name(province)
        
        if place_type == 'tourism':
            # ‡πÉ‡∏ä‡πâ get_combined_tourism ‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡∏ß‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß
            places = get_combined_tourism(province, limit)
        else:
            places = get_nominatim_places(province, place_type, limit)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå API ‡∏î‡πâ‡∏ß‡∏¢
        places = enrich_places_with_air_quality(places)

        return jsonify({
            'success': True,
            'data': places,
            'count': len(places)
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        })

@app.errorhandler(404)
def not_found(error):
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î 404"""
    return render_template('404.html'), 404

@app.errorhandler(500)
def internal_error(error):
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î 500"""
    return render_template('500.html'), 500

if __name__ == "__main__":
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå cache ‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏±‡∏ô‡πÅ‡∏≠‡∏õ
    os.makedirs('cache', exist_ok=True)
    app.run(debug=True, host='0.0.0.0', port=5000)
