import requests
import time
import math
from collections import defaultdict

# ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô ‚Üí ‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏à‡∏£‡∏¥‡∏á
ALIAS_TO_PROVINCE = {
    "‡πÇ‡∏Ñ‡∏£‡∏≤‡∏ä": "‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤",
    "‡∏Å‡∏ó‡∏°": "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£",
    "‡∏ö‡∏≤‡∏á‡∏Å‡∏≠‡∏Å": "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£",
    "‡∏û‡∏±‡∏ó‡∏¢‡∏≤": "‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ",
    "‡∏≠‡∏∏‡∏ö‡∏•": "‡∏≠‡∏∏‡∏ö‡∏•‡∏£‡∏≤‡∏ä‡∏ò‡∏≤‡∏ô‡∏µ",
    "‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô": "‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô",
    "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà": "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà",
    "‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï": "‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï",
    "‡∏Å‡∏£‡∏∞‡∏ö‡∏µ‡πà": "‡∏Å‡∏£‡∏∞‡∏ö‡∏µ‡πà",
    "‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ": "‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ"
}

# AirVisual API Key (Community tier: 10,000 calls/year, expires Jul 8, 2026)
AIRVISUAL_API_KEY = "eeb3ba1c-2778-4b29-a766-30a21e6fa7c8"
API_CALL_COUNT = 0  # ‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ API
MAX_API_CALLS = 10000  # ‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ï‡πà‡∏≠‡∏õ‡∏µ

# Global cache for air quality data
AIR_QUALITY_CACHE = {}

def normalize_province_name(name):
    return ALIAS_TO_PROVINCE.get(name.strip().lower(), name.strip())

def normalize_place_name(name):
    """‡∏õ‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö"""
    if not name:
        return ""
    # ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    normalized = name.strip().lower()
    # ‡∏•‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    words_to_remove = ['the', 'a', 'an', 'hotel', 'resort', 'restaurant', 'temple', 'wat']
    words = normalized.split()
    filtered_words = [word for word in words if word not in words_to_remove]
    return ' '.join(filtered_words)

def remove_duplicates(places):
    """‡∏•‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô"""
    if not places:
        return places
    
    seen_names = set()
    unique_places = []
    
    for place in places:
        place_name = place.get('name', '')
        normalized_name = normalize_place_name(place_name)
        
        if normalized_name and normalized_name not in seen_names:
            seen_names.add(normalized_name)
            unique_places.append(place)
        elif not normalized_name:  # ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ß‡πâ
            unique_places.append(place)
    
    return unique_places

def calculate_distance(lat1, lon1, lat2, lon2):
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏™‡∏≠‡∏á‡∏à‡∏∏‡∏î (Haversine formula)"""
    R = 6371  # ‡∏£‡∏±‡∏®‡∏°‡∏µ‡πÇ‡∏•‡∏Å‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£
    
    dlat = math.radians(lat2 - lat1)
    dlon = math.radians(lon2 - lon1)
    
    a = (math.sin(dlat/2)**2 + 
         math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * 
         math.sin(dlon/2)**2)
    
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))
    distance = R * c
    
    return distance

def get_nearest_air_quality_data():
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏à‡∏≤‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏û‡∏¥‡∏Å‡∏±‡∏î)"""
    global API_CALL_COUNT
    
    if API_CALL_COUNT >= MAX_API_CALLS:
        print(f"‚ö†Ô∏è  ‡∏ñ‡∏∂‡∏á‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ API ‡πÅ‡∏•‡πâ‡∏ß ({MAX_API_CALLS} calls/year)")
        return None
    
    url = f"http://api.airvisual.com/v2/nearest_city?key={AIRVISUAL_API_KEY}"
    
    try:
        response = requests.get(url, timeout=15)
        API_CALL_COUNT += 1
        
        if response.status_code == 200:
            data = response.json()
            if data.get('status') == 'success':
                city_data = data['data']
                return {
                    'city': city_data.get('city', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'),
                    'state': city_data.get('state', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'),
                    'country': city_data.get('country', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'),
                    'coordinates': city_data.get('location', {}).get('coordinates', [0, 0]),
                    'pollution': city_data.get('current', {}).get('pollution', {}),
                    'weather': city_data.get('current', {}).get('weather', {})
                }
        elif response.status_code == 429:
            print(f"‚ö†Ô∏è  API Rate limit - ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà (API calls: {API_CALL_COUNT}/{MAX_API_CALLS})")
            time.sleep(2)
            return None
        else:
            print(f"‚ùå HTTP {response.status_code} - API calls: {API_CALL_COUNT}/{MAX_API_CALLS}")
            return None
    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÑ‡∏î‡πâ: {e}")
        return None

def get_air_quality_stations(province_name):
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ß‡∏±‡∏î‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏à‡∏≤‡∏Å AirVisual API"""
    print(f"\nüå¨Ô∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ß‡∏±‡∏î‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÉ‡∏ô {province_name}...")
    print(f"üìä API calls ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏õ: {API_CALL_COUNT}/{MAX_API_CALLS}")
    
    # ‡πÉ‡∏ä‡πâ nearest city API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®
    air_quality_data = get_nearest_air_quality_data()
    if air_quality_data:
        return [air_quality_data]
    return []

def get_air_quality_by_coordinates(lat, lon):
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏à‡∏≤‡∏Å‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
    global API_CALL_COUNT, AIR_QUALITY_CACHE
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á cache key (‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏©‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á)
    cache_key = (round(lat, 1), round(lon, 1))
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cache ‡∏Å‡πà‡∏≠‡∏ô
    if cache_key in AIR_QUALITY_CACHE:
        return AIR_QUALITY_CACHE[cache_key]
    
    if API_CALL_COUNT >= MAX_API_CALLS:
        print(f"‚ö†Ô∏è  ‡∏ñ‡∏∂‡∏á‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ API ‡πÅ‡∏•‡πâ‡∏ß ({MAX_API_CALLS} calls/year)")
        # ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å nearest city ‡πÅ‡∏ó‡∏ô
        nearest_data = get_nearest_air_quality_data()
        AIR_QUALITY_CACHE[cache_key] = nearest_data
        return nearest_data
    
    url = f"http://api.airvisual.com/v2/nearest_city?lat={lat}&lon={lon}&key={AIRVISUAL_API_KEY}"
    
    try:
        response = requests.get(url, timeout=15)
        API_CALL_COUNT += 1
        
        if response.status_code == 200:
            data = response.json()
            if data.get('status') == 'success':
                city_data = data['data']
                air_quality_data = {
                    'city': city_data.get('city', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'),
                    'state': city_data.get('state', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'),
                    'country': city_data.get('country', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'),
                    'coordinates': city_data.get('location', {}).get('coordinates', [lon, lat]),
                    'pollution': city_data.get('current', {}).get('pollution', {}),
                    'weather': city_data.get('current', {}).get('weather', {})
                }
                AIR_QUALITY_CACHE[cache_key] = air_quality_data
                return air_quality_data
        elif response.status_code == 429:
            print(f"‚ö†Ô∏è  API Rate limit - ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÅ‡∏ó‡∏ô")
            # ‡πÉ‡∏ä‡πâ nearest city API ‡πÅ‡∏ó‡∏ô
            nearest_data = get_nearest_air_quality_data()
            AIR_QUALITY_CACHE[cache_key] = nearest_data
            return nearest_data
        else:
            print(f"‚ùå HTTP {response.status_code} - ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÅ‡∏ó‡∏ô")
            # ‡πÉ‡∏ä‡πâ nearest city API ‡πÅ‡∏ó‡∏ô
            nearest_data = get_nearest_air_quality_data()
            AIR_QUALITY_CACHE[cache_key] = nearest_data
            return nearest_data
    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÑ‡∏î‡πâ: {e}")
        # ‡πÉ‡∏ä‡πâ nearest city API ‡πÅ‡∏ó‡∏ô
        nearest_data = get_nearest_air_quality_data()
        AIR_QUALITY_CACHE[cache_key] = nearest_data
        return nearest_data

def get_aqi_level_description(aqi):
    """‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ AQI ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢"""
    if aqi <= 50:
        return "‡∏î‡∏µ‡∏°‡∏≤‡∏Å üü¢", "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏™‡∏∞‡∏≠‡∏≤‡∏î ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á"
    elif aqi <= 100:
        return "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á üü°", "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏û‡∏≠‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ ‡∏Ñ‡∏ô‡πÑ‡∏ß‡∏ï‡πà‡∏≠‡∏°‡∏•‡∏û‡∏¥‡∏©‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á"
    elif aqi <= 150:
        return "‡πÑ‡∏°‡πà‡∏î‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á üü†", "‡∏Ñ‡∏ô‡πÑ‡∏ß‡∏ï‡πà‡∏≠‡∏°‡∏•‡∏û‡∏¥‡∏©‡∏Ñ‡∏ß‡∏£‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á"
    elif aqi <= 200:
        return "‡πÑ‡∏°‡πà‡∏î‡∏µ üî¥", "‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏Ñ‡∏ß‡∏£‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á"
    elif aqi <= 300:
        return "‡πÅ‡∏¢‡πà‡∏°‡∏≤‡∏Å üü£", "‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏Ñ‡∏ß‡∏£‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á"
    else:
        return "‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢ ‚ö´", "‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏Ñ‡∏ß‡∏£‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£"

def display_air_quality_info(air_quality_data):
    """‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®"""
    if not air_quality_data:
        return
    
    pollution = air_quality_data.get('pollution', {})
    weather = air_quality_data.get('weather', {})
    
    print(f"   üå¨Ô∏è  ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®: {air_quality_data.get('city', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}")
    
    if pollution:
        aqi = pollution.get('aqius', 0)
        main_pollutant = pollution.get('mainus', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')
        level, description = get_aqi_level_description(aqi)
        
        print(f"   üìä AQI (US): {aqi} - {level}")
        print(f"   üí® ‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏´‡∏•‡∏±‡∏Å: {main_pollutant}")
        print(f"   ‚ÑπÔ∏è  {description}")
    
    if weather:
        temp = weather.get('tp', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')
        humidity = weather.get('hu', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')
        pressure = weather.get('pr', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')
        
        print(f"   üå°Ô∏è  ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: {temp}¬∞C | ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô: {humidity}% | ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏î‡∏≠‡∏≤‡∏Å‡∏≤‡∏®: {pressure} hPa")

def get_nominatim_places(province_name, place_type="tourism", limit=5):
    query = f"{place_type} in {province_name}, Thailand"
    params = {
        'q': query,
        'format': 'json',
        'limit': limit * 2,  # ‡∏î‡∏∂‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ã‡πâ‡∏≥
        'addressdetails': 1,
        'extratags': 1
    }
    headers = {
        'User-Agent': 'Thailand Tourism App (educational purpose)'
    }
    try:
        response = requests.get(
            "https://nominatim.openstreetmap.org/search",
            params=params,
            headers=headers,
            timeout=10
        )
        if response.status_code == 200:
            data = response.json()
            places = []
            for item in data:
                place_info = {
                    'name': item.get('display_name', '').split(',')[0],
                    'full_address': item.get('display_name', ''),
                    'lat': float(item.get('lat', 0)),
                    'lon': float(item.get('lon', 0)),
                    'type': item.get('type', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó'),
                    'importance': item.get('importance', 0)
                }
                places.append(place_info)
            
            # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
            unique_places = remove_duplicates(places)
            return unique_places[:limit]
        else:
            return []
    except Exception as e:
        return []

def group_places_by_air_quality(places):
    """‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ß‡∏±‡∏î‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î"""
    global API_CALL_COUNT
    
    if not places:
        return []
    
    grouped_places = defaultdict(list)
    
    print(f"üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®... (API calls: {API_CALL_COUNT}/{MAX_API_CALLS})")
    
    for place in places:
        if place.get('lat') and place.get('lon'):
            lat, lon = place['lat'], place['lon']
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏® (‡∏°‡∏µ cache ‡πÅ‡∏•‡∏∞ fallback)
            air_quality_data = get_air_quality_by_coordinates(lat, lon)
            place['air_quality'] = air_quality_data
            
            # ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ß‡∏±‡∏î‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®
            if air_quality_data:
                station_key = (air_quality_data.get('city', 'Unknown'), 
                              air_quality_data.get('state', 'Unknown'))
                grouped_places[station_key].append(place)
            else:
                grouped_places[('‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö', '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö')].append(place)
            
            # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏ö‡πà‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
            time.sleep(0.5)
    
    return grouped_places

def display_places_with_air_quality(places, title):
    if not places:
        print(f"\n‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {title}")
        return
    
    print(f"\nüìç {title}")
    print("-" * 50)
    
    # ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®
    grouped_places = group_places_by_air_quality(places)
    
    for station_info, place_list in grouped_places.items():
        station_city, station_state = station_info
        print(f"\nüè¢ ‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ß‡∏±‡∏î: {station_city}, {station_state}")
        print("-" * 30)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°
        if place_list and place_list[0].get('air_quality'):
            display_air_quality_info(place_list[0]['air_quality'])
            print()
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°
        for i, place in enumerate(place_list, 1):
            print(f"   {i}. {place.get('name', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠')}")
            if place.get('type'):
                print(f"      üè∑Ô∏è  ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {place['type']}")
            if place.get('full_address'):
                print(f"      üè† ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: {place['full_address'][:100]}...")
            if place.get('lat') and place.get('lon'):
                lat, lon = place['lat'], place['lon']
                print(f"      üó∫Ô∏è  ‡∏û‡∏¥‡∏Å‡∏±‡∏î: {lat:.4f}, {lon:.4f}")
                print(f"      üåê ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà: https://maps.google.com/?q={lat},{lon}")
            print()

def display_places(places, title):
    """‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®"""
    if not places:
        print(f"\n‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {title}")
        return
    
    print(f"\nüìç {title}")
    print("-" * 50)
    
    for i, place in enumerate(places, 1):
        print(f"{i}. {place.get('name', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠')}")
        if place.get('type'):
            print(f"   üè∑Ô∏è  ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {place['type']}")
        if place.get('full_address'):
            print(f"   üè† ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: {place['full_address'][:100]}...")
        if place.get('lat') and place.get('lon'):
            lat, lon = place['lat'], place['lon']
            print(f"   üó∫Ô∏è  ‡∏û‡∏¥‡∏Å‡∏±‡∏î: {lat:.4f}, {lon:.4f}")
            print(f"   üåê ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà: https://maps.google.com/?q={lat},{lon}")
        print()

def show_api_menu():
    print("\n" + "="*60)
    print("üèõÔ∏è ‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÑ‡∏ó‡∏¢ + ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®")
    print("="*60)
    print(f"üìä API Usage: {API_CALL_COUNT}/{MAX_API_CALLS} calls used")
    print(f"üóÇÔ∏è  Cache: {len(AIR_QUALITY_CACHE)} ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥")
    print("-"*60)
    print("1. üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß (‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏Å‡∏≤‡∏®)")
    print("2. üè® ‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏° (‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏Å‡∏≤‡∏®)")
    print("3. üçΩÔ∏è  ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£ (‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏Å‡∏≤‡∏®)")
    print("4. üéØ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏Å‡∏≤‡∏®)")
    print("5. üå¨Ô∏è  ‡∏î‡∏π‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®")
    print("6. üìã ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏Å‡∏≤‡∏® - ‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î API)")
    print("7. üßπ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Cache")
    print("0. ‚ùå ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
    print("-"*60)

def get_combined_tourism(province_name):
    """‡∏£‡∏ß‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏´‡∏°‡∏ß‡∏î"""
    tourism_types = [
        ("tourism", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß"),
        ("attraction", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à"),
        ("viewpoint", "‡∏à‡∏∏‡∏î‡∏ä‡∏°‡∏ß‡∏¥‡∏ß"),
        ("museum", "‡∏û‡∏¥‡∏û‡∏¥‡∏ò‡∏†‡∏±‡∏ì‡∏ë‡πå"),
        ("zoo", "‡∏™‡∏ß‡∏ô‡∏™‡∏±‡∏ï‡∏ß‡πå")
    ]
    
    print(f"\nüîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÉ‡∏ô {province_name}")
    print("=" * 50)
    
    all_results = []
    total_found = 0
    
    for place_type, thai_name in tourism_types:
        places = get_nominatim_places(province_name, place_type, limit=3)
        found_count = len(places)
        total_found += found_count
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
        if found_count > 0:
            print(f"‚úÖ {thai_name}: ‡∏û‡∏ö {found_count} ‡πÅ‡∏´‡πà‡∏á")
        else:
            print(f"‚ùå {thai_name}: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
            
        all_results.extend(places)
        
        # ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏ö 5 ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà
        if len(all_results) >= 5:
            break
    
    # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà 5 ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà
    unique_results = remove_duplicates(all_results)
    final_results = unique_results[:5]
    
    print(f"\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:")
    print(f"   üî¢ ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_found} ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà")
    print(f"   üîÑ ‡∏´‡∏•‡∏±‡∏á‡∏•‡∏ö‡∏ã‡πâ‡∏≥: {len(unique_results)} ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà")
    print(f"   üìç ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•: {len(final_results)} ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà")
    print("-" * 50)
    
    return final_results

def main():
    print("üáπüá≠ ‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÑ‡∏ó‡∏¢ + ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®")
    print("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß ‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏° ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®")
    print("‚ú® ‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà: ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏ô API limit")

    while True:
        show_api_menu()
        choice = input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (0-7): ").strip()

        if choice == "0":
            print("üëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£!")
            print(f"üìä API calls ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {API_CALL_COUNT}/{MAX_API_CALLS}")
            break

        elif choice == "7":
            AIR_QUALITY_CACHE.clear()
            print("üßπ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Cache ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")
            continue

        if choice in ["1", "2", "3", "4", "5", "6"]:
            province_name = input("\n‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î: ").strip()
            if not province_name:
                print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î")
                continue
            province_name = normalize_province_name(province_name)
            print(f"\nüîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î: {province_name}")

        if choice == "1":
            places = get_combined_tourism(province_name)
            display_places_with_air_quality(places, "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß")

        elif choice == "2":
            print(f"\nüîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡πÉ‡∏ô {province_name}")
            print("=" * 50)
            hotels = get_nominatim_places(province_name, "hotel", 8)
            found_count = len(hotels)
            print(f"‚úÖ ‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°: ‡∏û‡∏ö {found_count} ‡πÅ‡∏´‡πà‡∏á")
            print(f"üìç ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•: {min(found_count, 8)} ‡πÅ‡∏´‡πà‡∏á")
            print("-" * 50)
            display_places_with_air_quality(hotels, "‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°")

        elif choice == "3":
            print(f"\nüîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏ô {province_name}")
            print("=" * 50)
            restaurants = get_nominatim_places(province_name, "restaurant", 8)
            found_count = len(restaurants)
            print(f"‚úÖ ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£: ‡∏û‡∏ö {found_count} ‡πÅ‡∏´‡πà‡∏á")
            print(f"üìç ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•: {min(found_count, 8)} ‡πÅ‡∏´‡πà‡∏á")
            print("-" * 50)
            display_places_with_air_quality(restaurants, "‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£")

        elif choice == "4":
            print(f"\nüöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {province_name}")
            print("="*60)

            tourism_places = get_combined_tourism(province_name)
            display_places_with_air_quality(tourism_places, "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß")

            print(f"\nüîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡πÉ‡∏ô {province_name}")
            print("-" * 30)
            hotels = get_nominatim_places(province_name, "hotel", 4)
            found_count = len(hotels)
            print(f"‚úÖ ‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°: ‡∏û‡∏ö {found_count} ‡πÅ‡∏´‡πà‡∏á")
            display_places_with_air_quality(hotels, "‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°")

            print(f"\nüîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏ô {province_name}")
            print("-" * 30)
            restaurants = get_nominatim_places(province_name, "restaurant", 4)
            found_count = len(restaurants)
            print(f"‚úÖ ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£: ‡∏û‡∏ö {found_count} ‡πÅ‡∏´‡πà‡∏á")
            display_places_with_air_quality(restaurants, "‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£")

            print(f"\nüîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô {province_name}")
            print("-" * 30)
            shopping = get_nominatim_places(province_name, "shopping center", 3)
            found_count = len(shopping)
            print(f"‚úÖ ‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤: ‡∏û‡∏ö {found_count} ‡πÅ‡∏´‡πà‡∏á")
            display_places_with_air_quality(shopping, "‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤")

            print(f"\nüîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡∏±‡∏î/‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≤‡∏á‡∏®‡∏≤‡∏™‡∏ô‡∏≤‡πÉ‡∏ô {province_name}")
            print("-" * 30)
            temples = get_nominatim_places(province_name, "place of worship", 3)
            found_count = len(temples)
            print(f"‚úÖ ‡∏ß‡∏±‡∏î/‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≤‡∏á‡∏®‡∏≤‡∏™‡∏ô‡∏≤: ‡∏û‡∏ö {found_count} ‡πÅ‡∏´‡πà‡∏á")
            display_places_with_air_quality(temples, "‡∏ß‡∏±‡∏î/‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≤‡∏á‡∏®‡∏≤‡∏™‡∏ô‡∏≤")

            print(f"\n‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!")

        elif choice == "5":
            air_stations = get_air_quality_stations(province_name)
            if air_stations:
                print(f"\nüå¨Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÉ‡∏ô {province_name}")
                print("-" * 50)
                for station in air_stations:
                    display_air_quality_info(station)
            else:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®")

        elif choice == "6":
            print(f"\nüìã ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏Å‡∏≤‡∏®) - ‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î API")
            print("="*60)

            tourism_places = get_combined_tourism(province_name)
            display_places(tourism_places, "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß")

            print(f"\nüîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡πÉ‡∏ô {province_name}")
            print("-" * 30)
            hotels = get_nominatim_places(province_name, "hotel", 6)
            found_count = len(hotels)
            print(f"‚úÖ ‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°: ‡∏û‡∏ö {found_count} ‡πÅ‡∏´‡πà‡∏á")
            display_places(hotels, "‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°")

            print(f"\nüîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏ô {province_name}")
            print("-" * 30)
            restaurants = get_nominatim_places(province_name, "restaurant", 6)
            found_count = len(restaurants)
            print(f"‚úÖ ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£: ‡∏û‡∏ö {found_count} ‡πÅ‡∏´‡πà‡∏á")
            display_places(restaurants, "‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£")

            print(f"\nüîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô {province_name}")
            print("-" * 30)
            shopping = get_nominatim_places(province_name, "shopping center", 4)
            found_count = len(shopping)
            print(f"‚úÖ ‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤: ‡∏û‡∏ö {found_count} ‡πÅ‡∏´‡πà‡∏á")
            display_places(shopping, "‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤")

            print(f"\nüîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡∏±‡∏î/‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≤‡∏á‡∏®‡∏≤‡∏™‡∏ô‡∏≤‡πÉ‡∏ô {province_name}")
            print("-" * 30)
            temples = get_nominatim_places(province_name, "place of worship", 4)
            found_count = len(temples)
            print(f"‚úÖ ‡∏ß‡∏±‡∏î/‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≤‡∏á‡∏®‡∏≤‡∏™‡∏ô‡∏≤: ‡∏û‡∏ö {found_count} ‡πÅ‡∏´‡πà‡∏á")
            display_places(temples, "‡∏ß‡∏±‡∏î/‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≤‡∏á‡∏®‡∏≤‡∏™‡∏ô‡∏≤")

            print(f"\n‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå! (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ API ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®)")

        else:
            print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (0-7)")

        time.sleep(1)
        print("\n" + "="*60)
        input("‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠...")

if __name__ == "__main__":
    main()