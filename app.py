import requests

API_KEY = "dUO6Sbg1KV3GZEqtgwpsVisvOMTS0b8D"
HEADERS = {
    "accept": "application/json",
    "Accept-Language": "th",
    "x-api-key": API_KEY
}

# ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô ‚Üí ‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á
ALIAS_TO_PROVINCE = {
    "‡πÇ‡∏Ñ‡∏£‡∏≤‡∏ä": "‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤",
    "‡∏Å‡∏ó‡∏°": "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£",
    "‡∏ö‡∏≤‡∏á‡∏Å‡∏≠‡∏Å": "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£",
    "‡∏û‡∏±‡∏ó‡∏¢‡∏≤": "‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ",
    "‡∏≠‡∏∏‡∏ö‡∏•": "‡∏≠‡∏∏‡∏ö‡∏•‡∏£‡∏≤‡∏ä‡∏ò‡∏≤‡∏ô‡∏µ",
    "‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô": "‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô",
}

# ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà
PLACE_CATEGORIES = {
    2: "‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å",
    5: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß", 
    16: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏∑‡πà‡∏ô‡πÜ"
}

def normalize_province_name(name):
    return ALIAS_TO_PROVINCE.get(name.strip(), name.strip())

def get_places_by_category(category_id, province_name, limit=4):
    """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î"""
    url = "https://tatdataapi.io/api/v2/places"
    params = {
        "place_category_id": category_id,
        "limit": 300  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô 300 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
    }
    
    try:
        response = requests.get(url, headers=HEADERS, params=params)
        if response.status_code != 200:
            print(f"Error: API returned status code {response.status_code}")
            return []
        
        all_places = response.json().get("data", [])
        print(f"  [DEBUG] ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(all_places)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        
        # ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
        filtered = [
            place for place in all_places
            if place.get("location", {}).get("province", {}).get("name") == province_name
        ]
        
        print(f"  [DEBUG] ‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {len(filtered)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏£‡πà‡∏á‡∏Ñ‡∏£‡∏±‡∏î
        if not filtered:
            print(f"  [DEBUG] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î '{province_name}' ‡∏û‡∏≠‡∏î‡∏µ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠...")
            filtered = [
                place for place in all_places
                if province_name.lower() in place.get("location", {}).get("province", {}).get("name", "").lower()
            ]
            print(f"  [DEBUG] ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡πÄ‡∏à‡∏≠: {len(filtered)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        
        return filtered[:limit]
    
    except requests.exceptions.RequestException as e:
        print(f"Error fetching data: {e}")
        return []

def get_events_filtered(province_name):
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Events (‡πÄ‡∏î‡∏¥‡∏°)"""
    url = "https://tatdataapi.io/api/v2/events"
    params = {"limit": 300}  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏õ‡πá‡∏ô 300
    
    try:
        response = requests.get(url, headers=HEADERS, params=params)
        if response.status_code != 200:
            return []

        all_events = response.json().get("data", [])
        filtered = [
            event for event in all_events
            if event.get("location", {}).get("province", {}).get("name") == province_name
        ]
        
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏£‡πà‡∏á‡∏Ñ‡∏£‡∏±‡∏î
        if not filtered:
            filtered = [
                event for event in all_events
                if province_name.lower() in event.get("location", {}).get("province", {}).get("name", "").lower()
            ]
        
        return filtered[:4]
    
    except requests.exceptions.RequestException as e:
        print(f"Error fetching events: {e}")
        return []

def safe_get_title(item):
    """‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å title ‡∏´‡∏£‡∏∑‡∏≠ name"""
    return item.get("title") or item.get("name") or "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠"

def display_places_info(places):
    """‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"""
    if not places:
        print("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        return
    
    for place in places:
        title = safe_get_title(place)
        description = place.get("description", "")
        location = place.get("location", {})
        district = location.get("district", {}).get("name", "")
        
        print(f"- {title}")
        if district:
            print(f"  üìç {district}")
        if description and len(description) > 0:
            # ‡∏ï‡∏±‡∏î‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏™‡∏±‡πâ‡∏ô‡πÜ
            short_desc = description[:100] + "..." if len(description) > 100 else description
            print(f"  üí¨ {short_desc}")
        print()

def main():
    input_name = input("‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î: ").strip()
    province_name = normalize_province_name(input_name)
    
    print(f"\n{'='*50}")
    print(f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÉ‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î {province_name}")
    print(f"{'='*50}")
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
    for category_id, category_name in PLACE_CATEGORIES.items():
        print(f"\nüèõÔ∏è {category_name}")
        print("-" * 30)
        places = get_places_by_category(category_id, province_name)
        display_places_info(places)
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Events (‡πÄ‡∏î‡∏¥‡∏°)
    print(f"\nüé≠ ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå")
    print("-" * 30)
    events = get_events_filtered(province_name)
    if events:
        for e in events:
            print(f"- {safe_get_title(e)}")
    else:
        print("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Event")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô API (‡πÄ‡∏û‡∏∑‡πà‡∏≠ debug)
    print(f"\nüîç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
    print("-" * 30)
    print("‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏£‡∏≤‡∏∞ API ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ô‡∏µ‡πâ")
    print("‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÄ‡∏ä‡πà‡∏ô: ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£, ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà, ‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï, ‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô")
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡∏π debug info
    show_debug = input("\n‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• debug ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/n): ").lower()
    if show_debug == 'y':
        show_available_provinces()

def show_available_provinces():
    """‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô API"""
    print("\nüîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô API...")
    
    try:
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å places API
        url = "https://tatdataapi.io/api/v2/places"
        params = {"limit": 100}
        response = requests.get(url, headers=HEADERS, params=params)
        
        if response.status_code == 200:
            places = response.json().get("data", [])
            provinces = set()
            for place in places:
                province = place.get("location", {}).get("province", {}).get("name")
                if province:
                    provinces.add(province)
            
            print(f"‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÉ‡∏ô Places API ({len(provinces)} ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î):")
            for prov in sorted(provinces):
                print(f"  - {prov}")
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å events API
        url = "https://tatdataapi.io/api/v2/events"
        params = {"limit": 100}
        response = requests.get(url, headers=HEADERS, params=params)
        
        if response.status_code == 200:
            events = response.json().get("data", [])
            event_provinces = set()
            for event in events:
                province = event.get("location", {}).get("province", {}).get("name")
                if province:
                    event_provinces.add(province)
            
            print(f"\n‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÉ‡∏ô Events API ({len(event_provinces)} ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î):")
            for prov in sorted(event_provinces):
                print(f"  - {prov}")
                
    except Exception as e:
        print(f"Error: {e}")

if __name__ == "__main__":
    main()