import requests
import json
from datetime import datetime
from datetime import date
from urllib.parse import quote
import time

# ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô ‚Üí ‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á
ALIAS_TO_PROVINCE = {
    "‡πÇ‡∏Ñ‡∏£‡∏≤‡∏ä": "‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤",
    "‡∏Å‡∏ó‡∏°": "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£",
    "‡∏ö‡∏≤‡∏á‡∏Å‡∏≠‡∏Å": "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£",
    "‡∏û‡∏±‡∏ó‡∏¢‡∏≤": "‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ",
    "‡∏≠‡∏∏‡∏ö‡∏•": "‡∏≠‡∏∏‡∏ö‡∏•‡∏£‡∏≤‡∏ä‡∏ò‡∏≤‡∏ô‡∏µ",
    "‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô": "‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô",
    "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà": "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà",
    "‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï": "‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï",
    "‡∏Å‡∏£‡∏∞‡∏ö‡∏µ‡πà": "‡∏Å‡∏£‡∏∞‡∏ö‡∏µ‡πà",
    "‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ": "‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ"
}

# get current date and time
def get_datetime():
  print('Getting Date Data')
  """Converts a datetime object to a dictionary."""
  # get date data
  d = date.today()
  d = d.strftime("%A %d %B %Y")
  d = d.split(' ')
  date_dict = {
      'day': d[0],
      'date': d[1],
      'month': d[2],
      'year': d[3]
  }
  # fetch time data
  time_obj = datetime.now()
  CURRENT_TIME = f'{time_obj.hour}:{time_obj.minute}'
  time_dict = {
      'current_time': CURRENT_TIME
      }
  datetime_dict_output = date_dict | time_dict
  print(datetime_dict_output)
  return datetime_dict_output

# convert nickname to full province name
def normalize_province_name(name):
    return ALIAS_TO_PROVINCE.get(name.strip(), name.strip())

# fetch data from Thailand Open Data Portal
def get_thailand_open_data(province_name):
    print("\nüîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Thailand Open Data Portal...")
    base_url = "https://data.go.th/api/datasets"
    try:
        search_url = f"{base_url}?q=tourism+{province_name}"
        response = requests.get(search_url, timeout=10)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Open Data Portal: {len(data.get('results', []))} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            return data.get('results', [])[:5]
        else:
            print(f"‚ùå Open Data Portal: HTTP {response.status_code}")
            return []
    except Exception as e:
        print(f"‚ùå Open Data Portal Error: {e}")
        return []

# fetch places from OpenStreetMap Overpass API
def get_overpass_data(province_name, amenity_type="tourism", limit=5):
    print(f"\nüîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤{amenity_type}‡∏à‡∏≤‡∏Å OpenStreetMap Overpass API...")
    overpass_query = f"""
    [out:json][timeout:25];
    (
      node["{amenity_type}"]["addr:province"~"{province_name}",i];
      way["{amenity_type}"]["addr:province"~"{province_name}",i];
      relation["{amenity_type}"]["addr:province"~"{province_name}",i];
    );
    out center meta;
    """
    overpass_url = "https://overpass-api.de/api/interpreter"
    try:
        response = requests.post(
            overpass_url,
            data=overpass_query,
            headers={'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'},
            timeout=30
        )
        if response.status_code == 200:
            data = response.json()
            elements = data.get('elements', [])
            print(f"‚úÖ Overpass API ‡∏û‡∏ö: {len(elements)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            places = []
            for element in elements[:limit]:
                place_info = {
                    'name': element.get('tags', {}).get('name', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠'),
                    'type': element.get('tags', {}).get(amenity_type, '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó'),
                    'address': element.get('tags', {}).get('addr:full', ''),
                    'lat': element.get('lat', 0),
                    'lon': element.get('lon', 0)
                }
                places.append(place_info)
            return places
        else:
            print(f"‚ùå Overpass API: HTTP {response.status_code}")
            return []
    except Exception as e:
        print(f"‚ùå Overpass API Error: {e}")
        return []

# fetch places from Nominatim API
def get_nominatim_places(province_name, place_type="tourism", limit=5):
    print(f"\nüîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ {place_type} ‡∏à‡∏≤‡∏Å Nominatim API...")
    query = f"{place_type} in {province_name}, Thailand"
    params = {
        'q': query,
        'format': 'json',
        'limit': limit,
        'addressdetails': 1,
        'extratags': 1
    }
    headers = {
        'User-Agent': 'Thailand Tourism App (educational purpose)'
    }
    try:
        response = requests.get(
            "https://nominatim.openstreetmap.org/search",
            params=params,
            headers=headers,
            timeout=10
        )
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Nominatim API ‡∏û‡∏ö: {len(data)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            places = []
            for item in data:
                place_info = {
                    'name': item.get('display_name', '').split(',')[0],
                    'full_address': item.get('display_name', ''),
                    'lat': float(item.get('lat', 0)),
                    'lon': float(item.get('lon', 0)),
                    'type': item.get('type', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó'),
                    'importance': item.get('importance', 0)
                }
                places.append(place_info)
            return places
        else:
            print(f"‚ùå Nominatim API: HTTP {response.status_code}")
            return []
    except Exception as e:
        print(f"‚ùå Nominatim API Error: {e}")
        return []

# display places in a formatted way
def display_places(places, title):
    if not places:
        print(f"\n‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {title}")
        return
    print(f"\nüìç {title}")
    print("-" * 50)
    for i, place in enumerate(places, 1):
        print(f"{i}. {place.get('name', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠')}")
        if place.get('type'):
            print(f"   üè∑Ô∏è  ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {place['type']}")
        if place.get('full_address'):
            print(f"   üè† ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: {place['full_address'][:100]}...")
        if place.get('lat') and place.get('lon'):
            print(f"   üó∫Ô∏è  ‡∏û‡∏¥‡∏Å‡∏±‡∏î: {place['lat']:.4f}, {place['lon']:.4f}")
        print()

# show api menu
def show_api_menu():
    print("\n" + "="*60)
    print("üèõÔ∏è ‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÑ‡∏ó‡∏¢")
    print("="*60)
    print("1. üèõÔ∏è  Thailand Open Data Portal")
    print("2. üó∫Ô∏è  OpenStreetMap Overpass API")
    print("3. üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß (Nominatim)")
    print("4. üè® ‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏° (Nominatim)")
    print("5. üçΩÔ∏è  ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£ (Nominatim)")
    print("6. üéØ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
    print("0. ‚ùå ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
    print("-"*60)

# fetch weather data from IQAIR
def get_weather_data(province_name):
    print('Getting Weather Data...')
    city = province_name
    state = province_name
    key = 'c276b727-085b-4e13-8a72-181ce160c0a6'
    response = requests.get(f'http://api.airvisual.com/v2/city?city={city}&state={state}&country=Thailand&key={key}')
    weather_data = response.json()
    print(f'Status: {weather_data['status']}')
    return weather_data

# main function to run the application
def main():
    print("üáπüá≠ ‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÑ‡∏ó‡∏¢")
    print("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß ‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏° ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£")

    while True:
        show_api_menu()
        choice = input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (0-6): ").strip()

        if choice == "0":
            print("üëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£!")
            break

        if choice in ["1", "2", "3", "4", "5", "6"]:
            province_name = input("\n‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î: ").strip()
            if not province_name:
                print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î")
                continue
            province_name = normalize_province_name(province_name)
            print(f"\nüîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î: {province_name}")

        if choice == "1":
            data = get_thailand_open_data(province_name)
            if data:
                print(f"\nüìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Thailand Open Data Portal")
                print("-" * 50)
                for i, item in enumerate(data, 1):
                    print(f"{i}. {item.get('title', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠')}")
                    if item.get('description'):
                        print(f"   üìù {item['description'][:100]}...")
                    print()
            else:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Thailand Open Data Portal")

        elif choice == "2":
            tourism_places = get_overpass_data(province_name, "tourism")
            display_places(tourism_places, "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß (Overpass API)")

        elif choice == "3":
            places = get_nominatim_places(province_name, "tourism", 8)
            display_places(places, "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß")

        elif choice == "4":
            hotels = get_nominatim_places(province_name, "hotel", 8)
            display_places(hotels, "‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°")

        elif choice == "5":
            restaurants = get_nominatim_places(province_name, "restaurant", 8)
            display_places(restaurants, "‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£")

        elif choice == "6":
            print(f"\nüöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {province_name}")
            print("="*60)

            tourism_places = get_nominatim_places(province_name, "tourism", 6)
            display_places(tourism_places, "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß")

            hotels = get_nominatim_places(province_name, "hotel", 6)
            display_places(hotels, "‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°")

            restaurants = get_nominatim_places(province_name, "restaurant", 6)
            display_places(restaurants, "‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£")

            shopping = get_nominatim_places(province_name, "shopping center", 4)
            display_places(shopping, "‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤")

            temples = get_nominatim_places(province_name, "place of worship", 4)
            display_places(temples, "‡∏ß‡∏±‡∏î/‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≤‡∏á‡∏®‡∏≤‡∏™‡∏ô‡∏≤")

            open_data = get_thailand_open_data(province_name)
            if open_data:
                print(f"\nüìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (Open Data Portal)")
                print("-" * 50)
                for i, item in enumerate(open_data[:3], 1):
                    print(f"{i}. {item.get('title', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠')}")
                    print()

            print(f"\n‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!")

        time.sleep(1)
        print("\n" + "="*60)
        input("‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠...")

if __name__ == "__main__":
    main()
